{"pageProps":{"post":{"title":"Optimizing with Lagrange","date":"2024-03-08","slug":"lagrange","author":{"name":"Kim Dong Hun"},"content":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    annotation: \"annotation\",\n    h2: \"h2\",\n    math: \"math\",\n    mi: \"mi\",\n    mo: \"mo\",\n    mrow: \"mrow\",\n    p: \"p\",\n    semantics: \"semantics\",\n    span: \"span\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Lagrange is for optimization\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When we discuss about optimization, we often times have a function that explains the relationship of our variables and our output with an additional budget constraint. Optimization is about maximizing or minimizing the output given the constraints. This constraint allows us to think about optimization. For example, think of a simple optimization problem where you want to maximize the output of revenue given the constraint of budget. Let us say you have a function \", _jsxs(_components.span, {\n        className: \"katex\",\n        children: [_jsx(_components.span, {\n          className: \"katex-mathml\",\n          children: _jsx(_components.math, {\n            xmlns: \"http://www.w3.org/1998/Math/MathML\",\n            children: _jsxs(_components.semantics, {\n              children: [_jsxs(_components.mrow, {\n                children: [_jsx(_components.mi, {\n                  children: \"f\"\n                }), _jsx(_components.mo, {\n                  stretchy: \"false\",\n                  children: \"(\"\n                }), _jsx(_components.mi, {\n                  children: \"x\"\n                }), _jsx(_components.mo, {\n                  separator: \"true\",\n                  children: \",\"\n                }), _jsx(_components.mi, {\n                  children: \"y\"\n                }), _jsx(_components.mo, {\n                  stretchy: \"false\",\n                  children: \")\"\n                })]\n              }), _jsx(_components.annotation, {\n                encoding: \"application/x-tex\",\n                children: \"f(x,y)\"\n              })]\n            })\n          })\n        }), _jsx(_components.span, {\n          className: \"katex-html\",\n          \"aria-hidden\": \"true\",\n          children: _jsxs(_components.span, {\n            className: \"base\",\n            children: [_jsx(_components.span, {\n              className: \"strut\",\n              style: {\n                height: \"1em\",\n                verticalAlign: \"-0.25em\"\n              }\n            }), _jsx(_components.span, {\n              className: \"mord mathnormal\",\n              style: {\n                marginRight: \"0.10764em\"\n              },\n              children: \"f\"\n            }), _jsx(_components.span, {\n              className: \"mopen\",\n              children: \"(\"\n            }), _jsx(_components.span, {\n              className: \"mord mathnormal\",\n              children: \"x\"\n            }), _jsx(_components.span, {\n              className: \"mpunct\",\n              children: \",\"\n            }), _jsx(_components.span, {\n              className: \"mspace\",\n              style: {\n                marginRight: \"0.1667em\"\n              }\n            }), _jsx(_components.span, {\n              className: \"mord mathnormal\",\n              style: {\n                marginRight: \"0.03588em\"\n              },\n              children: \"y\"\n            }), _jsx(_components.span, {\n              className: \"mclose\",\n              children: \")\"\n            })]\n          })\n        })]\n      }), \" where x is the quantity you can produce\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"keyword":"Decision Tree","categories":["Mathematics"],"thumbnail":"","excerpt":"Lagrange Multiplier is a powerful tool to optimize a function with constraints. We will learn this by applying Lagrange to an economic problem.","data":{"title":"Optimizing with Lagrange","excerpt":"Lagrange Multiplier is a powerful tool to optimize a function with constraints. We will learn this by applying Lagrange to an economic problem.","date":"2024-03-08","author":{"name":"Kim Dong Hun"},"keyword":"Decision Tree","categories":["Mathematics"],"WIP":true,"thumbnail":""},"nextPath":"","prevPath":"/posts/parametric_surface","prevTitle":"3D Parametric curves and surfaces for computer visualization","nextTitle":"","isMdx":true}},"__N_SSG":true}